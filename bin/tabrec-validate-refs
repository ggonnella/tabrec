#!/usr/bin/env python3
"""
Validate the references in given records of a tabrec file by cross-checking them
with a list of identifiers in a given record type.

Usage:
  tabrec-validate-refs [options] <infname> <ref_pos> <ids_pos>

Arguments:
    <infname>          Name of input TSV file
    <ref_pos>          Positions of the references
                         Format: rt:col[-col...][,rt:col[-col...]...
                         rt: record type
                         col: 1-based column number or tag name
    <ids_pos>          Position of the identifiers
                         Format: rt[:col]
                         rt: record type
                         col: 1-based column number (default: 2)

Options:
  --nr                  Do not check if all IDs are referenced
  --ni                  Do not check if all references are valid
  --show                Show list of references and list of IDs
  --colon               Include colon in list of word characters
  -l --ignore-list L    Comma-separated list of identifiers to ignore
  -r --ignore-regex R   Regular expression for identifiers to ignore
  -R --ids-regex R      Identifier regular expression
  -h --help             Show this screen.
  --version             Show version.

Exit status:
  0  if no errors
  >0  if errors (number of errors)
"""

import sys
from docopt import docopt
import re

def extract_ref_set(infname, refpos, tagnames, regex, idchk):
    ref_set = set()
    with open(infname, "r") as f:
        for line_num, line in enumerate(f, 1):
            fields = line.strip().split("\t")
            if fields[0] not in refpos:
                continue
            colnums, tagnames = refpos[fields[0]]
            for colnum in colnums:
                if len(fields) < colnum:
                    sys.stderr.write(f"Column number {colnum} does not "+\
                        f"exist in line {line_num}\n")
                    sys.exit(1)
                identifiers = [x for x in re.findall(regex, fields[colnum]) \
                               if idchk.check(x)]
                ref_set.update(identifiers)
            for tagname in tagnames:
                for field in fields:
                    if field.startswith(tagname + ":") \
                          and field[len(tagname)+3] == ":":
                        value = field[len(tagname) + 3:]
                        identifiers = [x for x in re.findall(regex, value) \
                                       if idchk.check(x)]
                        ref_set.update(identifiers)
    return ref_set

def extract_ids_set(infname, ref_rtype, ref_ids_colnum, idchk):
    ids_set = set()
    with open(infname, "r") as f:
        for line_num, line in enumerate(f, 1):
            fields = line.strip().split("\t")
            if fields[0] != ref_rtype:
                continue
            if len(fields) < ref_ids_colnum:
                sys.stderr.write(f"Column number {ref_ids_colnum} does not "+\
                    f"exist in line {line_num}\n")
                sys.exit(1)
            identifier = fields[ref_ids_colnum]
            if idchk.check(identifier):
              ids_set.add(identifier)
    return ids_set

def check_refs_against_ids(ids_set, refpos, tagnames, infname, regex, idchk):
    n_errors = 0
    for line_num, line in enumerate(open(infname), 1):
        fields = line.strip().split("\t")
        if fields[0] not in refpos:
            continue
        colnums, tagnames = refpos[fields[0]]
        identifiers = set()
        for colnum in colnums:
          new_ids = [x for x in re.findall(regex, fields[colnum]) \
                     if idchk.check(x)]
          identifiers.update(new_ids)
        for tagname in tagnames:
            for field in fields:
                if field.startswith(tagname + ":") \
                      and field[len(tagname)+3] == ":":
                    value = field[len(tagname) + 3:]
                    new_ids = [x for x in re.findall(regex, value) \
                               if idchk.check(x)]
                    identifiers.update(new_ids)
        for identifier in identifiers:
            if identifier not in ids_set:
                sys.stderr.write(f"Error in line {line_num}, "+\
                    f"invalid reference '{identifier}':\n")
                sys.stderr.write(line)
                n_errors += 1
    return n_errors

def check_ids_against_refs(ref_set, ref_rtype, ref_ids_colnum, infname, idchk):
    n_errors = 0
    with open(infname, "r") as f:
        for line_num, line in enumerate(f, 1):
            fields = line.strip().split("\t")
            if fields[0] != ref_rtype:
                continue
            identifier = fields[ref_ids_colnum]
            if idchk.check(identifier) and identifier not in ref_set:
                sys.stderr.write(f"Error in line {line_num}, "+\
                    f"identifier never referenced '{identifier}':\n")
                sys.stderr.write(line)
                n_errors += 1
    return n_errors

class IdentifierChecker:
  def __init__(self, ignore, regex_ignore, regex_ids):
    self.ignore = ignore
    self.regex_ignore = re.compile(regex_ignore) if regex_ignore else None
    self.regex_ids = re.compile(regex_ids) if regex_ids else None

  @classmethod
  def new_from_args(cls, arg_ignore_list, arg_ignore_regex, arg_ids_regex):
    ignore = set(arg_ignore_list.split(",")) \
               if arg_ignore_list else set()
    regex_ignore = arg_ignore_regex
    regex_ids = arg_ids_regex
    return cls(ignore, regex_ignore, regex_ids)

  def check(self, identifier):
    if identifier in self.ignore:
      return False
    if self.regex_ignore:
      if re.match(self.regex_ignore, identifier):
        return False
    if self.regex_ids:
      if not re.match(self.regex_ids, identifier):
        return False
    return True

def main(args):
    infname = args["<infname>"]
    refpos = {}
    refpos_elems = args["<ref_pos>"].split(",")
    idchk = IdentifierChecker.new_from_args(args["--ignore-list"],
                                            args["--ignore-regex"],
                                            args["--ids-regex"])
    for refpos_elem in refpos_elems:
      rtype, cols = refpos_elem.split(":")
      if cols == "":
        sys.stderr.write("Error: no columns specified for record type "+\
                         f"'{rtype}'\n")
        sys.exit(1)
      colnums_tagnames = [int(i) - 1 if i.isdigit() else i \
                          for i in cols.split("-")]
      colnums = [i for i in colnums_tagnames if isinstance(i, int)]
      tagnames = [i for i in colnums_tagnames if isinstance(i, str)]
      refpos[rtype] = (colnums, tagnames)
    if ":" in args["<ids_pos>"]:
      ref_rtype, ref_ids_colnum = args["<ids_pos>"].split(":")
      ref_ids_colnum = int(ref_ids_colnum) - 1
    else:
      ref_rtype = args["<ids_pos>"]
      ref_ids_colnum = 1
    if args["--colon"]:
      regex = r"\b[\w:]+\b"
    else:
      regex = r"\b\w+\b"

    ids_set = extract_ids_set(infname, ref_rtype, ref_ids_colnum, idchk)
    if args['--show']:
      sys.stderr.write(f"Identifiers: {sorted(ids_set)}\n\n")
    ref_set = extract_ref_set(infname, refpos, tagnames, regex, idchk)
    if args['--show']:
      sys.stderr.write(f"References: {sorted(ref_set)}\n\n")
    n_errors = 0
    if not args["--ni"]:
      n_errors += check_refs_against_ids(ids_set, refpos, tagnames, infname,
          regex, idchk)
    if not args["--nr"]:
      n_errors += check_ids_against_refs(ref_set, ref_rtype, ref_ids_colnum,
          infname, idchk)
    if n_errors > 0:
        sys.exit(n_errors)

if __name__ == "__main__":
    main(docopt(__doc__))
