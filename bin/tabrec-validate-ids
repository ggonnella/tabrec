#!/usr/bin/env python3
"""
Check that all identifiers in the specified column of records with the given
record type(s) are unique and consist of letters, numbers, and underscores
(or optionally also colons).

Usage:
  tabrec-validate-ids [options] <infname> <rtypes> [<colnum>]

Arguments:
  infname     Name of input file
  rtypes      Record types to consider (comma-separated list)
  colnum      Column number containing identifiers [default: 2]

Options:
  --colon     Include colons in identifiers
  --select S  Only consider records where field f matches given regex
              Format: f:regex, where f is a 1-based column number
  -h --help   Show this screen.
  --quiet     Do not print anything if no errors are found
  --regex R   Check that all identifiers match the given regular expression
  --version   Show version.
"""

import sys
import re
from collections import defaultdict
from docopt import docopt

def main(args):
    infname = args["<infname>"]
    rtypes = args["<rtypes>"].split(",")
    colnum = int(args["<colnum>"]) - 1 if args["<colnum>"] else 1
    include_colon = args["--colon"]
    pattern = r"^\w+(:\w+)*$" if include_colon else r"^\w+$"
    regex = re.compile(args["--regex"]) if args["--regex"] else None
    if args["--select"]:
      if ":" not in args["--select"]:
        sys.exit("Error: --select argument must be of the form f:regex")
      req_col_regex = args["--select"].split(":", 1)
      req_col = int(req_col_regex[0]) - 1
      req_regex = re.compile(req_col_regex[1])
    else:
      req_col = None
      req_regex = None

    id_lines = defaultdict(list)
    n_errors = 0

    with open(infname, "r") as f:
        for line_num, line in enumerate(f, 1):
            fields = line.strip().split("\t")
            if fields[0] not in rtypes:
                continue
            if req_col is not None and not req_regex.match(fields[req_col]):
                continue
            if len(fields) < colnum + 1:
                sys.stderr.write(f"Column number {colnum+1} does not exist "+\
                    f"in line {line_num} of file {infname}\n")
                sys.exit(1)
            id_value = fields[colnum]
            if not re.match(pattern, id_value):
                sys.stderr.write(f"Error: Invalid identifier: '{id_value}'\n")
                sys.stderr.write(f"  Line {line_num}:\n    {line}")
                n_errors += 1
            if regex and not re.match(regex, id_value):
                sys.stderr.write("Error: Identifier does not "+\
                    f"match given regex: '{id_value}'\n")
                sys.stderr.write(f"  Line {line_num}:\n    {line}")
                n_errors += 1
            id_lines[id_value].append((line_num, line))

    for id_value, num_lines in id_lines.items():
        if len(num_lines) > 1:
          sys.stderr.write(f"Error: Identifier not unique: '{id_value}'\n")
          n_errors += 1
          for line_num, line in num_lines:
              sys.stderr.write(f"  Line {line_num}:\n    "+line)

    if n_errors > 0:
      sys.exit(n_errors)
    elif not args["--quiet"]:
      if args["--value"]:
        vmsg = f" (col {req_col+1} matching '{req_regex}')"
      else:
        vmsg = ""
      rtypesmsg = "/".join(rtypes)
      sys.stdout.write("OK: No errors found: "+\
          f"{len(id_lines)} unique {rtypesmsg}{vmsg} identifiers "+\
          f"in column {colnum+1} found\n")
    sys.exit(0)

if __name__ == "__main__":
    args = docopt(__doc__)
    main(args)

